// import processing.sound.*;

// SquareWave square1, square2;  // Canales de onda cuadrada
// WaveGenerator triangle;       // Canal de onda triangular
// WhiteNoise noise;             // Canal de ruido
// int dutyCycleIndex = 0;       // Ciclo de trabajo actual para las ondas cuadradas
// float[] dutyCycles = {0.125, 0.25, 0.5, 0.75};  // Opciones de ciclo de trabajo

// void setup() {
//   size(600, 400);
//   textAlign(CENTER, CENTER);
  
//   // Inicializar los canales
//   square1 = new SquareWave(this);
//   square2 = new SquareWave(this);
//   triangle = new WaveGenerator(this);
//   noise = new WhiteNoise(this);
// }

// void draw() {
//   background(30);
//   fill(255);
//   text("Presiona teclas para activar los canales", width / 2, height / 2 - 20);
//   text("1: Primer canal cuadrado\n2: Segundo canal cuadrado\n3: Onda triangular\n4: Ruido", width / 2, height / 2 + 40);
// }

// // Manejar entradas del teclado para activar los sonidos
// void keyPressed() {
//   if (key == '1') {
//     square1.start(440); // Canal cuadrado 1
//   } else if (key == '2') {
//     square2.start(330); // Canal cuadrado 2
//   } else if (key == '3') {
//     triangle.start(220); // Onda triangular
//   } else if (key == '4') {
//     noise.play(0.5); // Ruido con volumen del 50%
//   } else if (key == 'd') {
//     // Cambiar el ciclo de trabajo de las ondas cuadradas
//     dutyCycleIndex = (dutyCycleIndex + 1) % dutyCycles.length;
//     square1.setDutyCycle(dutyCycles[dutyCycleIndex]);
//     square2.setDutyCycle(dutyCycles[dutyCycleIndex]);
//   }
// }

// // Manejar la liberaci贸n de teclas para detener los sonidos
// void keyReleased() {
//   if (key == '1') {
//     square1.stop();
//   } else if (key == '2') {
//     square2.stop();
//   } else if (key == '3') {
//     triangle.stop();
//   } else if (key == '4') {
//     noise.stop();
//   }
// }

// // Clase para generar ondas cuadradas
// class SquareWave {
//   Pulse osc;
  
//   SquareWave(PApplet parent) {
//     osc = new Pulse(parent);
//   }
  
//   void start(float freq) {
//     osc.play();
//     osc.freq(freq);
//   }
  
//   void freq(float freq) {
//     osc.freq(freq);
//   }
  
//   void setDutyCycle(float duty) {
//     osc.width(duty); // Cambiar ciclo de trabajo
//   }
  
//   void stop() {
//     osc.stop();
//   }
// }

// // Clase para generar ondas triangulares
// class WaveGenerator {
//   TriOsc osc;
  
//   WaveGenerator(PApplet parent) {
//     osc = new TriOsc(parent);
//   }
  
//   void start(float freq) {
//     osc.play();
//     osc.freq(freq);
//   }
  
//   void freq(float freq) {
//     osc.freq(freq);
//   }
  
//   void stop() {
//     osc.stop();
//   }
// }


import processing.sound.*;

SquareWave square1, square2;
WaveGenerator triangle;
WhiteNoise noise;
SuperMarioSong marioSong;

void setup() {
  size(600, 400);
  textAlign(CENTER, CENTER);

  // Inicializar canales
  square1 = new SquareWave(this);
  square2 = new SquareWave(this);
  triangle = new WaveGenerator(this);
  noise = new WhiteNoise(this);

  // Crear la canci贸n de Super Mario
  marioSong = new SuperMarioSong(this, square1, square2, triangle, noise);
}

void draw() {
  background(30);
  fill(255);
  text("Presiona ESPACIO para reproducir la canci贸n de Super Mario Bros.", width / 2, height / 2);
}

void keyPressed() {
  if (key == ' ') {
    marioSong.play(); // Reproducir la canci贸n cuando se presiona la barra espaciadora
  }
}

// Clase para generar ondas cuadradas
class SquareWave {
  Pulse osc;

  SquareWave(PApplet parent) {
    osc = new Pulse(parent);
  }

  void start(float freq) {
    osc.play();
    osc.freq(freq);
  }

  void stop() {
    osc.stop();
  }
}

// Clase para generar ondas triangulares
class WaveGenerator {
  TriOsc osc;

  WaveGenerator(PApplet parent) {
    osc = new TriOsc(parent);
  }

  void start(float freq) {
    osc.play();
    osc.freq(freq);
  }

  void stop() {
    osc.stop();
  }
}

// Clase para generar ruido blanco
class Noise {
  WhiteNoise osc;

  Noise(PApplet parent) {
    osc = new WhiteNoise(parent);
  }

  void play(float amp) {
    osc.amp(amp);
    osc.play();
  }

  void stop() {
    osc.stop();
  }
}
